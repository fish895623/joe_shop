import com.diffplug.spotless.LineEnding

plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'jacoco'

    id 'eclipse'
    id 'idea'
}

group = 'com.bit.joe'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    developmentOnly
    compileOnly {
        extendsFrom annotationProcessor
    }
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.+'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.+'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.3.+'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.3.+'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.+'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.3.+'
//    implementation 'org.flywaydb:flyway-core:10.+'
//    implementation 'org.flywaydb:flyway-mysql:10.+'
//    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.+'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation platform('org.junit:junit-bom:5.+') // Manages JUnit versions
    testImplementation 'org.junit.jupiter:junit-jupiter' // JUnit 5 API + Engine
    testImplementation 'org.junit.jupiter:junit-jupiter-api' // JUnit 5 API
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine' // JUnit 5 Engine
    testImplementation 'org.junit.platform:junit-platform-suite' // For test suites
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // Needed for running tests
    implementation 'org.springframework.boot:spring-boot-starter-validation' // Jakarta Bean Validation
    developmentOnly("org.springframework.boot:spring-boot-devtools")

    // testcontainer
    testImplementation group: "org.testcontainers", name: 'junit-jupiter', version: '1.+'
    testImplementation group: 'org.testcontainers', name: 'mysql', version: '1.+'
    testImplementation group: 'org.testcontainers', name: 'mariadb', version: '1.+'
    implementation('com.microsoft.playwright:playwright:1.49.0')
    testRuntimeOnly 'com.h2database:h2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

tasks.named('test') {
    useJUnitPlatform()

    ignoreFailures = gradle.startParameter.taskNames.contains('build')

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, includes: [
                'com/bit/joe/shoppingmall/controller/*.class',
                'com/bit/joe/shoppingmall/security/*.class',
                'com/bit/joe/shoppingmall/service/**/*.class',
        ])
    }))
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs = ['-Djava.security.egd=file:/dev/./urandom']
}

spotless {
    lineEndings = LineEnding.UNIX
    java {
        googleJavaFormat().aosp()

        importOrder('java', 'javax', 'org', 'com')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.register('installPlaywright', JavaExec) {
    mainClass = 'com.microsoft.playwright.CLI'
    classpath = sourceSets.main.runtimeClasspath
    args = ['install', '--with-deps']
}
